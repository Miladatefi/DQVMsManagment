@model IEnumerable<DQVMsManagement.Models.VMInfo>

<h1>Hyper-V Virtual Machines</h1>

<table class="table table-striped" id="vmTable">
  <thead class="table-dark">
    <tr>
      <th>Name</th>
      <th>State</th>
      <th>CPU Usage (%)</th>
      <th>Memory (MB)</th>
      <th>Up Time</th>
      <th class="text-center">Actions</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var vm in Model)
    {
      <tr data-vm="@vm.Name">
        <td>@vm.Name</td>
        <td>@vm.State</td>
        <td>@vm.CPUUsage%</td>
        <td>@vm.MemoryAssignedMB</td>
        <td>@vm.UpTime</td>
        <td class="text-center"></td>
      </tr>
    }
  </tbody>
</table>

@section Scripts {
  <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
  <script>
    // Build connection with auto-reconnect
    const connection = new signalR.HubConnectionBuilder()
      .withUrl("/vmhub")
      .withAutomaticReconnect()
      .build();

    async function startStream() {
      try {
        await connection.start();
        const stream = connection.stream("StreamVMUpdates");
        stream.subscribe({
          next: updateTable,
          error: err => {
            console.error("Stream error:", err);
            // Try to re-establish the stream after a delay
            setTimeout(startStream, 5000);
          },
          complete: () => console.warn("Stream completed")
        });
      } catch (err) {
        console.error("Connection failed:", err);
        setTimeout(startStream, 5000);
      }
    }

    function updateTable(vms) {
      const tbody = document.querySelector("#vmTable tbody");
      tbody.innerHTML = "";
      vms.forEach(vm => {
        const tr = document.createElement("tr");
        tr.setAttribute("data-vm", vm.name);
        tr.innerHTML = `
          <td>${vm.name}</td>
          <td>${vm.state}</td>
          <td>${vm.cpuUsage}%</td>
          <td>${vm.memoryAssignedMB}</td>
          <td>${vm.upTime}</td>
          <td class="text-center">${actionButtons(vm)}</td>
        `;
        tbody.appendChild(tr);
      });
    }

    function actionButtons(vm) {
      if (vm.state.toLowerCase() !== "running") {
        return `<button onclick="vmAction('Start','${vm.name}')"
                         class="btn btn-success btn-sm">Start</button>`;
      }

      const stopClass = vm.canManage ? "btn-danger" : "btn-secondary";
      const restartClass = vm.canManage ? "btn-warning" : "btn-secondary";
      const stopClick = vm.canManage
        ? `vmAction('Stop','${vm.name}')`
        : `alert('Create a checkpoint first.')`;
      const restartClick = vm.canManage
        ? `vmAction('Restart','${vm.name}')`
        : `alert('Create a checkpoint first.')`;

      return `
        <button onclick="${stopClick}" class="btn ${stopClass} btn-sm me-1">Stop</button>
        <button onclick="${restartClick}" class="btn ${restartClass} btn-sm me-1">Restart</button>
        <button onclick="startCheckpoint('${vm.name}')" class="btn btn-primary btn-sm">Checkpoint</button>
      `;
    }

    function startCheckpoint(name) {
      const cell = document.querySelector(`tr[data-vm="${name}"] td:last-child`);
      cell.innerHTML = `
        <div class="progress" style="height:1.5rem;">
          <div class="progress-bar progress-bar-striped progress-bar-animated"
               role="progressbar" style="width:0%">0%</div>
        </div>
      `;
      connection.invoke("CreateCheckpoint", name)
        .catch(err => alert("Checkpoint failed: " + err));
    }

    function vmAction(action, name) {
      fetch(`/VMs/${action}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name })
      });
    }

    // Kick off the streaming loop
    startStream();
  </script>
}
